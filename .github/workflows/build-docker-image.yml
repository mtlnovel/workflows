name: Build & Push to Docker Image container registry

on:
  workflow_call:
    secrets:
      BOT_TOKEN:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3.0.2

      #- name: Set up QEMU (We don't need QEMU, because we don't build images for platforms other than linux/amd64, which is our current native arch in our infra
      #  uses: docker/setup-qemu-action@v1.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.0.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.0.0
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract repository name
        id: repo
        run: echo ::set-output name=name::${GITHUB_REPOSITORY#*/}

      - name: Extract tag name
        id: tags
        if: ${{ github.event_name == 'release' }}
        run: echo ::set-output name=name::${GITHUB_REF##*/}

      - name: Extract flavor
        id: flavor
        run: if [ "${{ github.event_name }}" = "release" ]; then echo ::set-output name=name::; else echo ::set-output name=name::-dev; fi

      - name: Generate Docker image metadata
        uses: docker/metadata-action@v4.0.1
        id: img_meta
        with:
          flavor: |
            latest=auto
            suffix=${{ steps.flavor.outputs.name }}
          images: ${{ steps.repo.outputs.name }}
          tags: |
            ${{ steps.tags.outputs.name }}
            latest

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3.0.0
        with:
          context: ./
          tags: ${{ steps.img_meta.outputs.tags }}
          labels: ${{ steps.img_meta.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' }}
          secrets: |
            "GH_PKG_AUTH_TOKEN=${{ secrets.BOT_TOKEN }}"
          cache-from: type=gha,mode=max
          cache-to: type=gha,mode=max
